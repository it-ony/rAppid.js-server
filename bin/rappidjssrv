#!/usr/bin/env node

var optimist = require('optimist'),
    context = require('../lib/context.js'),
    path = require('path'),
    fs = require('fs'),
    jsdom = require('jsdom'),
    http = require('http'),
    flow = require('flow.js').flow,
    url = require('url'),
    underscore = require('underscore'),
    QueryString = require(__dirname + '/../lib/queryString.js').QueryString;

var argv = optimist
    .usage('\nUsage: $0 mainClass.xml')
    .demand(1)  // at least one parameter is required

    .default('port', 80)
    .default('config', 'config.json')
    .default('html', 'index.html')

    .alias('p', 'port')
    .alias('u', 'applicationUrl')

    .boolean(['staticFiles'])

    .describe('dir', 'Application directory (public)')
    .describe('port', 'Port ot listen')
    .describe('config', 'Config.json file')
    .describe('html', 'html start file')
    .describe('o', 'A option to start the application')
    .describe('applicationUrl', 'base Url used for relative requests')
    .describe('staticFiles', 'base Url used for relative requests')

    .argv;

var applicationDir = null,
    applicationFile = argv._[0].replace(/^~\//, process.env.HOME + '/');

if (applicationDir) {
    applicationFile = path.join(applicationDir, applicationFile);
}

applicationFile = path.resolve(applicationFile);

if (!path.existsSync(applicationFile)) {
    console.warn("Application '" + applicationFile + "' not found");
    process.exit(1);
}

if (!applicationDir) {
    var x = /(.*\/public\/)(.+)$/i.exec(applicationFile);
    if (x) {
        applicationDir = x[1];
        applicationFile = x[2];
    }
}

if (!applicationDir) {
    console.warn("Application directory not found");
    process.exit(1);
}

var defaultStartParameter = argv.o;

flow()
    .seq("appContext", function(cb) {
        // create an application context
        context(applicationDir, applicationFile, argv.config, argv.applicationUrl, cb);
    })
    .seq("html", function() {
        var indexContent = fs.readFileSync(path.join(applicationDir, argv.html));

        // clean up html
        var doc = jsdom.jsdom(indexContent);

        var scripts = doc.getElementsByTagName('script');
        scripts._snapshot.forEach(function (script) {
            var usage = script.getAttribute("data-usage");
            if (usage == "bootstrap" || usage == "lib") {
                script.parentNode.removeChild(script);
            }
        });

        return doc.innerHTML;

    })
    .seq(function() {

        var appContext = this.vars.appContext,
            indexContent = this.vars.html;

        // create the server
        var srv = http.createServer(function (request, response) {

            try {
                console.log(request.url);

                var uri = url.parse(request.url),
                    queryParameter = QueryString.parse(uri.query);


                if (uri.pathname === "/" || uri.pathname === "/" + argv.html) {
                    // start file or configured html file
                    var d = new Date();
                    flow()
                        .seq("doc", function () {
                            // generate document
                            return jsdom.jsdom(indexContent);
                        })
                        .seq("app", function (cb) {
                            appContext.createApplicationInstance(cb.vars.doc, function (err, systemManager, application) {
                                cb(err, application);
                            });
                        })
                        .seq(function (cb) {
                            // start application
                            var startParameter = _.extend({}, defaultStartParameter);

                            if (queryParameter._escaped_fragment_) {
                                startParameter.initialHash = queryParameter._escaped_fragment_;
                            }

                            cb.vars.app.start(defaultStartParameter, cb);
                        })
                        .seq("html", function () {
                            this.vars.app.render(this.vars.doc.body);
                            return this.vars.doc;
                        })
                        .exec(function (err, results) {

                            var status = 500,
                                buf;

                            if (!err) {
                                try {
                                    buf = results.html.innerHTML;
                                    status = 200;
                                } catch (e) {
                                    buf = JSON.stringify(e);
                                }
                            } else {
                                buf = JSON.stringify(err);
                            }

                            response.writeHead(status, {
                                'Content-Length': buf.length,
                                'Content-Type': 'text/html; charset=utf-8' });
                            response.write(buf);
                            response.end();

                            console.log("Responses " + ((new Date()).getTime() - d.getTime()) + "ms");

                        });
                } else {

                    // static file handling

                    if (!argv.staticFiles) {
                        response.writeHead(403, {"Content-Type": "text/plain"});
                        response.write("403 Forbidden\n");
                        response.end();
                    } else {
                        var filename = path.join(applicationDir, uri.pathname);
                        // TODO check if inside basedir
                        path.exists(filename, function (exists) {
                            if (!exists) {
                                response.writeHead(404, {"Content-Type": "text/plain"});
                                response.write("404 Not Found\n");
                                response.end();
                                return;
                            }

                            fs.readFile(filename, "binary", function (err, file) {
                                if (err) {
                                    response.writeHead(500, {"Content-Type": "text/plain"});
                                    response.write(err + "\n");
                                    response.end();
                                    return;
                                }

                                response.writeHead(200);
                                response.write(file, "binary");
                                response.end();
                            });
                        });
                    }
                }

            } catch (ex) {
                response.writeHead(500, {"Content-Type": "text/plain"});
                response.write(ex + "\n");
                response.end();
            }

        });

        srv.listen(argv.port);
    })
    .exec(function(err) {
        console.log(err || "server started at port " + argv.port);
    });

